// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PropertyInspection.Data;

#nullable disable

namespace PropertyInspection.Data.Migrations
{
    [DbContext(typeof(PropertyInspectionContext))]
    [Migration("20220814100915_NonClusteredPostcode")]
    partial class NonClusteredPostcode
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("PropertyInspection.Data.Agent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("PropertyInspection.Data.Inspector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.ToTable("Inspectors");
                });

            modelBuilder.Entity("PropertyInspection.Data.PropertyTest", b =>
                {
                    b.Property<int>("PropertyKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PropertyKey"), 1L, 1);

                    b.Property<int>("AgentRefId")
                        .HasColumnType("int");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PostCode")
                        .HasColumnType("int");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Address");

                    b.HasKey("PropertyKey");

                    b.HasIndex("AgentRefId");

                    b.HasIndex("PostCode");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("PostCode"), false);

                    b.ToTable("Property");
                });

            modelBuilder.Entity("PropertyInspection.Data.Inspector", b =>
                {
                    b.HasOne("PropertyInspection.Data.Agent", "Agent")
                        .WithMany("Inspectors")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("PropertyInspection.Data.PropertyTest", b =>
                {
                    b.HasOne("PropertyInspection.Data.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");
                });

            modelBuilder.Entity("PropertyInspection.Data.Agent", b =>
                {
                    b.Navigation("Inspectors");
                });
#pragma warning restore 612, 618
        }
    }
}
